load http-server.maude



--- erew initComposition parseTermFromFile(composition, composition, "cache.spec") checkAndPrint(composition, composition, [] <> loadAssertions("test();", "http-assert.lang")) .
--- erew initComposition parseTermFromFile(composition, composition, "cache.spec") checkAndPrint(composition, composition, [] assertions(parse("assert(connections [0] . path == \"/login\");"))) .
--- erew initComposition parseTermFromFile(composition, composition, "cache.spec") simulateAndPrint(composition, composition) .


mod TEST is 
    protecting COMPOSITION .
    op test : -> Configuration .

    eq test = <> connectionManager(13)
    initManager(2) service("backend", server(code(function("addFavorite",
    params(id("request")), assign(id("user"), member(id("request"), "user")) ;
    $ifelse($eq(member(id("user"), "type"), str("guest")), call("request",
    args(str("db"),str("insert-favorite"),dict(dictItem(id("type"), str(
    "guest")),dictItem(id("guest_id"), member(id("user"), "session"))))) ;
    assign(id("response"), call("request", args(str("db"),str("get-favorites"),
    dict(dictItem(id("type"), str("guest")),dictItem(id("field"), str(
    "guest_id")),dictItem(id("value"), member(id("user"), "session")))))) ;
    call("request", args(str("cache"),str("set"),dict(dictItem(id("key"), $add(
    str("fav:guest:"), member(id("user"), "session"))),dictItem(id("value"),
    call("len", args(id("response"))))))), $ifelse($eq(member(id("user"),
    "type"), str("user")), call("request", args(str("db"),str(
    "insert-favorite"),dict(dictItem(id("type"), str("user")),dictItem(id(
    "user_id"), member(id("user"), "id"))))) ; assign(id("response"), call(
    "request", args(str("db"),str("get-favorites"),dict(dictItem(id("type"),
    str("user")),dictItem(id("field"), str("user_id")),dictItem(id("value"),
    member(id("user"), "id")))))) ; call("request", args(str("cache"),str(
    "set"),dict(dictItem(id("key"), $add(str("fav:user:"), member(id("user"),
    "id"))),dictItem(id("value"), call("len", args(id("response"))))))), pass))
    ; call("respond", args(str("ok")))) ; function("getFavoriteCount", params(
    id("request")), assign(id("user"), member(id("request"), "user")) ;
    $ifelse($eq(member(id("user"), "type"), str("guest")), assign(id("r"),
    call("request", args(str("cache"),str("get"),dict(dictItem(id("key"), $add(
    str("fav:guest:"), member(id("user"), "session"))),dictItem(id("default"),
    int(0)))))) ; call("respond", args(id("r"))), $ifelse($eq(member(id(
    "user"), "type"), str("user")), assign(id("r"), call("request", args(str(
    "cache"),str("get"),dict(dictItem(id("key"), $add(str("fav:user:"), member(
    id("user"), "id"))),dictItem(id("default"), int(0)))))) ; call("respond",
    args(id("r"))), pass)) ; call("respond", args(str("ok")))) ; function(
    "login", params(id("request")), assign(id("guest"), member(id("request"),
    "user")) ; assign(id("user_id"), member(id("request"), "user_id")) ;
    assign(id("fav"), call("request", args(str("db"),str("get-favorites"),dict(
    dictItem(id("type"), str("guest")),dictItem(id("field"), str("guest_id")),
    dictItem(id("value"), member(id("guest"), "session")))))) ; assign(id(
    "userCount"), call("request", args(str("cache"),str("get"),dict(dictItem(
    id("key"), $add(str("fav:user:"), id("user_id"))),dictItem(id("default"),
    int(0)))))) ; call("request", args(str("cache"),str("set"),dict(dictItem(
    id("key"), $add(str("fav:user:"), id("user_id"))),dictItem(id("value"),
    $add(id("userCount"), call("len", args(id("fav")))))))))),routes(route(
    "/add-favorite", "addFavorite"),route("/favorite-count",
    "getFavoriteCount"),route("/login", "login")),process(connection(9, initId(
    0), "backend", httpRequest("/login", map(("user" |-> map(("session" |->
    strVal("session-0"), "type" |-> strVal("guest"))), "user_id" |-> strVal(
    "0"))))), {< executor : Executor | currentResult : {strVal("ok"),[func(
    "addFavorite",params(id("request")),assign(id("user"), member(id(
    "request"), "user")) ; $ifelse($eq(member(id("user"), "type"), str(
    "guest")), call("request", args(str("db"),str("insert-favorite"),dict(
    dictItem(id("type"), str("guest")),dictItem(id("guest_id"), member(id(
    "user"), "session"))))) ; assign(id("response"), call("request", args(str(
    "db"),str("get-favorites"),dict(dictItem(id("type"), str("guest")),
    dictItem(id("field"), str("guest_id")),dictItem(id("value"), member(id(
    "user"), "session")))))) ; call("request", args(str("cache"),str("set"),
    dict(dictItem(id("key"), $add(str("fav:guest:"), member(id("user"),
    "session"))),dictItem(id("value"), call("len", args(id("response"))))))),
    $ifelse($eq(member(id("user"), "type"), str("user")), call("request", args(
    str("db"),str("insert-favorite"),dict(dictItem(id("type"), str("user")),
    dictItem(id("user_id"), member(id("user"), "id"))))) ; assign(id(
    "response"), call("request", args(str("db"),str("get-favorites"),dict(
    dictItem(id("type"), str("user")),dictItem(id("field"), str("user_id")),
    dictItem(id("value"), member(id("user"), "id")))))) ; call("request", args(
    str("cache"),str("set"),dict(dictItem(id("key"), $add(str("fav:user:"),
    member(id("user"), "id"))),dictItem(id("value"), call("len", args(id(
    "response"))))))), pass)) ; call("respond", args(str("ok")))) ; func(
    "getFavoriteCount",params(id("request")),assign(id("user"), member(id(
    "request"), "user")) ; $ifelse($eq(member(id("user"), "type"), str(
    "guest")), assign(id("r"), call("request", args(str("cache"),str("get"),
    dict(dictItem(id("key"), $add(str("fav:guest:"), member(id("user"),
    "session"))),dictItem(id("default"), int(0)))))) ; call("respond", args(id(
    "r"))), $ifelse($eq(member(id("user"), "type"), str("user")), assign(id(
    "r"), call("request", args(str("cache"),str("get"),dict(dictItem(id("key"),
    $add(str("fav:user:"), member(id("user"), "id"))),dictItem(id("default"),
    int(0)))))) ; call("respond", args(id("r"))), pass)) ; call("respond",
    args(str("ok")))) ; func("getPersistent",params(id("key")),$dispatch(id(
    "key"), getPersistentValue) ; $lock(id("res"), getPersistentValue) ;
    return(id("res"))) ; func("login",params(id("request")),assign(id("guest"),
    member(id("request"), "user")) ; assign(id("user_id"), member(id(
    "request"), "user_id")) ; assign(id("fav"), call("request", args(str("db"),
    str("get-favorites"),dict(dictItem(id("type"), str("guest")),dictItem(id(
    "field"), str("guest_id")),dictItem(id("value"), member(id("guest"),
    "session")))))) ; assign(id("userCount"), call("request", args(str(
    "cache"),str("get"),dict(dictItem(id("key"), $add(str("fav:user:"), id(
    "user_id"))),dictItem(id("default"), int(0)))))) ; call("request", args(
    str("cache"),str("set"),dict(dictItem(id("key"), $add(str("fav:user:"), id(
    "user_id"))),dictItem(id("value"), $add(id("userCount"), call("len", args(
    id("fav"))))))))) ; func("request",params(id("svc"),id("path"),id(
    "payload")),$dispatch(list(id("svc"),id("path"),id("payload")),
    connectionOut) ; $lock(id("res"), connectionOut) ; return(id("res"))) ;
    func("respond",params(id("value")),$dispatch(id("value"), connectionIn)) ;
    func("setPersistent",params(id("key"),id("value")),$dispatch(list(id(
    "key"),id("value")), setPersistentValue) ; $lock(id("res"),
    setPersistentValue)) | "fav" := 28 ; "guest" := 7 ; "request" := 4 ;
    "userCount" := 40 ; "user_id" := 8 | stack(52, 0 |-> strVal("session-0") ;
    1 |-> strVal("guest") ; 2 |-> dictVal(d("session", 0) ; d("type", 1)) ; 3
    |-> strVal("0") ; 4 |-> dictVal(d("user", 2) ; d("user_id", 3)) ; 5 |->
    strVal("session-0") ; 6 |-> strVal("guest") ; 7 |-> dictVal(d("session", 5)
    ; d("type", 6)) ; 8 |-> strVal("0") ; 9 |-> strVal("db") ; 10 |-> strVal(
    "get-favorites") ; 11 |-> strVal("guest") ; 12 |-> strVal("guest_id") ; 13
    |-> strVal("session-0") ; 14 |-> dictVal(d("field", 12) ; d("type", 11) ;
    d("value", 13)) ; 15 |-> strVal("db") ; 16 |-> strVal("get-favorites") ; 17
    |-> strVal("guest_id") ; 18 |-> strVal("guest") ; 19 |-> strVal(
    "session-0") ; 20 |-> dictVal(d("field", 17) ; d("type", 18) ; d("value",
    19)) ; 21 |-> listVal(24) ; 22 |-> strVal("session-0") ; 23 |-> strVal(
    "guest") ; 24 |-> dictVal(d("guest_id", 22) ; d("type", 23)) ; 25 |->
    strVal("session-0") ; 26 |-> strVal("guest") ; 27 |-> dictVal(d("guest_id",
    25) ; d("type", 26)) ; 28 |-> listVal(27) ; 29 |-> strVal("cache") ; 30 |->
    strVal("get") ; 31 |-> strVal("fav:user:0") ; 32 |-> intVal(0) ; 33 |->
    dictVal(d("default", 32) ; d("key", 31)) ; 34 |-> strVal("cache") ; 35 |->
    strVal("get") ; 36 |-> intVal(0) ; 37 |-> strVal("fav:user:0") ; 38 |->
    dictVal(d("default", 36) ; d("key", 37)) ; 39 |-> intVal(1) ; 40 |->
    intVal(1) ; 41 |-> strVal("cache") ; 42 |-> strVal("set") ; 43 |-> strVal(
    "fav:user:0") ; 44 |-> intVal(2) ; 45 |-> dictVal(d("key", 43) ; d("value",
    44)) ; 46 |-> strVal("cache") ; 47 |-> strVal("set") ; 48 |-> strVal(
    "fav:user:0") ; 49 |-> intVal(2) ; 50 |-> dictVal(d("key", 48) ; d("value",
    49)) ; 51 |-> strVal("ok"))]},initialState : ([func("addFavorite",params(
    id("request")),assign(id("user"), member(id("request"), "user")) ; $ifelse(
    $eq(member(id("user"), "type"), str("guest")), call("request", args(str(
    "db"),str("insert-favorite"),dict(dictItem(id("type"), str("guest")),
    dictItem(id("guest_id"), member(id("user"), "session"))))) ; assign(id(
    "response"), call("request", args(str("db"),str("get-favorites"),dict(
    dictItem(id("type"), str("guest")),dictItem(id("field"), str("guest_id")),
    dictItem(id("value"), member(id("user"), "session")))))) ; call("request",
    args(str("cache"),str("set"),dict(dictItem(id("key"), $add(str(
    "fav:guest:"), member(id("user"), "session"))),dictItem(id("value"), call(
    "len", args(id("response"))))))), $ifelse($eq(member(id("user"), "type"),
    str("user")), call("request", args(str("db"),str("insert-favorite"),dict(
    dictItem(id("type"), str("user")),dictItem(id("user_id"), member(id(
    "user"), "id"))))) ; assign(id("response"), call("request", args(str("db"),
    str("get-favorites"),dict(dictItem(id("type"), str("user")),dictItem(id(
    "field"), str("user_id")),dictItem(id("value"), member(id("user"),
    "id")))))) ; call("request", args(str("cache"),str("set"),dict(dictItem(id(
    "key"), $add(str("fav:user:"), member(id("user"), "id"))),dictItem(id(
    "value"), call("len", args(id("response"))))))), pass)) ; call("respond",
    args(str("ok")))) ; func("getFavoriteCount",params(id("request")),assign(
    id("user"), member(id("request"), "user")) ; $ifelse($eq(member(id("user"),
    "type"), str("guest")), assign(id("r"), call("request", args(str("cache"),
    str("get"),dict(dictItem(id("key"), $add(str("fav:guest:"), member(id(
    "user"), "session"))),dictItem(id("default"), int(0)))))) ; call("respond",
    args(id("r"))), $ifelse($eq(member(id("user"), "type"), str("user")),
    assign(id("r"), call("request", args(str("cache"),str("get"),dict(dictItem(
    id("key"), $add(str("fav:user:"), member(id("user"), "id"))),dictItem(id(
    "default"), int(0)))))) ; call("respond", args(id("r"))), pass)) ; call(
    "respond", args(str("ok")))) ; func("getPersistent",params(id("key")),
    $dispatch(id("key"), getPersistentValue) ; $lock(id("res"),
    getPersistentValue) ; return(id("res"))) ; func("login",params(id(
    "request")),assign(id("guest"), member(id("request"), "user")) ; assign(id(
    "user_id"), member(id("request"), "user_id")) ; assign(id("fav"), call(
    "request", args(str("db"),str("get-favorites"),dict(dictItem(id("type"),
    str("guest")),dictItem(id("field"), str("guest_id")),dictItem(id("value"),
    member(id("guest"), "session")))))) ; assign(id("userCount"), call(
    "request", args(str("cache"),str("get"),dict(dictItem(id("key"), $add(str(
    "fav:user:"), id("user_id"))),dictItem(id("default"), int(0)))))) ; call(
    "request", args(str("cache"),str("set"),dict(dictItem(id("key"), $add(str(
    "fav:user:"), id("user_id"))),dictItem(id("value"), $add(id("userCount"),
    call("len", args(id("fav"))))))))) ; func("request",params(id("svc"),id(
    "path"),id("payload")),$dispatch(list(id("svc"),id("path"),id("payload")),
    connectionOut) ; $lock(id("res"), connectionOut) ; return(id("res"))) ;
    func("respond",params(id("value")),$dispatch(id("value"), connectionIn)) ;
    func("setPersistent",params(id("key"),id("value")),$dispatch(list(id(
    "key"),id("value")), setPersistentValue) ; $lock(id("res"),
    setPersistentValue)) | empty | stack(4, 0 |-> strVal("session-0") ; 1 |->
    strVal("guest") ; 2 |-> dictVal(d("session", 0) ; d("type", 1)) ; 3 |->
    strVal("0"))]),waiting : none >}))) service("cache", server(code(function(
    "set", params(id("request")), assign(id("k"), call("getPersistent", args(
    str("keys")))) ; assign(index(id("k"), member(id("request"), "key")),
    member(id("request"), "value")) ; call("setPersistent", args(str("keys"),
    id("k"))) ; call("respond", args(str("ok")))) ; function("get", params(id(
    "request")), assign(id("k"), call("getPersistent", args(str("keys")))) ;
    $ifelse(call("keyExists", args(id("k"),member(id("request"), "key"))),
    call("respond", args(index(id("k"), member(id("request"), "key")))), call(
    "respond", args(member(id("request"), "default"))))) ; function("flush",
    params(id("request")), call("setPersistent", args(str("keys"),dict(
    emptyDict))) ; call("respond", args(str("ok"))))),routes(route("flush",
    "flush"),route("get", "get"),route("set", "set")),persistent("keys", map((
    "fav:guest:session-0" |-> intVal(1), "fav:user:0" |-> intVal(2))))))
    service("db", server(code(function("insertFavorite", params(id("request")),
    assign(id("fav"), call("getPersistent", args(str("favorites")))) ; call(
    "setPersistent", args(str("favorites"),call("append", args(id("fav"),id(
    "request"))))) ; call("respond", args(str("ok")))) ; function(
    "getFavorites", params(id("query")), assign(id("fav"), call(
    "getPersistent", args(str("favorites")))) ; assign(id("i"), int(0)) ;
    assign(id("resp"), list(empty)) ; $while($lt(id("i"), call("len", args(id(
    "fav")))), $ifelse($and($eq(member(index(id("fav"), id("i")), "type"),
    member(id("query"), "type")), $eq(index(index(id("fav"), id("i")), member(
    id("query"), "field")), member(id("query"), "value"))), assign(id("resp"),
    call("append", args(id("resp"),index(id("fav"), id("i"))))), pass) ;
    assign(id("i"), $add(id("i"), int(1)))) ; call("respond", args(id(
    "resp"))))),routes(route("get-favorites", "getFavorites"),route(
    "insert-favorite", "insertFavorite")),persistent("favorites", list(map((
    "guest_id" |-> strVal("session-0"), "type" |-> strVal("guest"))) map((
    "type" |-> strVal("user"), "user_id" |-> strVal("0"))))))) service(initId(
    0), server(process(dummyConnection, {< executor : Executor | currentResult
    : {void,getState(evalStmt(call("request", args(str("backend"),str(
    "/favorite-count"),dict(dictItem(id("user"), id("user"))))), getState(
    functionCallResult(params(id("svc"),id("path"),id("payload")), [func(
    "request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id(
    "svc"),id("path"),id("payload")), connectionOut) ; $lock(id("res"),
    connectionOut) ; return(id("res"))) | "user" := 2 | stack(29, 0 |-> strVal(
    "guest") ; 1 |-> strVal("session-0") ; 2 |-> dictVal(d("session", 1) ; d(
    "type", 0)) ; 3 |-> strVal("backend") ; 4 |-> strVal("/add-favorite") ; 5
    |-> strVal("session-0") ; 6 |-> strVal("guest") ; 7 |-> dictVal(d(
    "session", 5) ; d("type", 6)) ; 8 |-> dictVal(d("user", 7)) ; 9 |-> strVal(
    "backend") ; 10 |-> strVal("/add-favorite") ; 11 |-> strVal("session-0") ;
    12 |-> strVal("guest") ; 13 |-> dictVal(d("session", 11) ; d("type", 12)) ;
    14 |-> dictVal(d("user", 13)) ; 15 |-> strVal("ok") ; 16 |-> strVal(
    "backend") ; 17 |-> strVal("/add-favorite") ; 18 |-> strVal("user") ; 19
    |-> strVal("0") ; 20 |-> dictVal(d("id", 19) ; d("type", 18)) ; 21 |->
    dictVal(d("user", 20)) ; 22 |-> strVal("backend") ; 23 |-> strVal(
    "/add-favorite") ; 24 |-> strVal("0") ; 25 |-> strVal("user") ; 26 |->
    dictVal(d("id", 24) ; d("type", 25)) ; 27 |-> dictVal(d("user", 26)) ; 28
    |-> strVal("ok"))], evalStmt(return(id("res")), getState({void,locked([
    func("request",params(id("svc"),id("path"),id("payload")),$dispatch(list(
    id("svc"),id("path"),id("payload")), connectionOut) ; $lock(id("res"),
    connectionOut) ; return(id("res"))) | "path" := 30 ; "payload" := 35 ;
    "res" := 43 ; "svc" := 29 ; "user" := 2 | stack(44, 0 |-> strVal("guest") ;
    1 |-> strVal("session-0") ; 2 |-> dictVal(d("session", 1) ; d("type", 0)) ;
    3 |-> strVal("backend") ; 4 |-> strVal("/add-favorite") ; 5 |-> strVal(
    "session-0") ; 6 |-> strVal("guest") ; 7 |-> dictVal(d("session", 5) ; d(
    "type", 6)) ; 8 |-> dictVal(d("user", 7)) ; 9 |-> strVal("backend") ; 10
    |-> strVal("/add-favorite") ; 11 |-> strVal("session-0") ; 12 |-> strVal(
    "guest") ; 13 |-> dictVal(d("session", 11) ; d("type", 12)) ; 14 |->
    dictVal(d("user", 13)) ; 15 |-> strVal("ok") ; 16 |-> strVal("backend") ;
    17 |-> strVal("/add-favorite") ; 18 |-> strVal("user") ; 19 |-> strVal("0")
    ; 20 |-> dictVal(d("id", 19) ; d("type", 18)) ; 21 |-> dictVal(d("user",
    20)) ; 22 |-> strVal("backend") ; 23 |-> strVal("/add-favorite") ; 24 |->
    strVal("0") ; 25 |-> strVal("user") ; 26 |-> dictVal(d("id", 24) ; d(
    "type", 25)) ; 27 |-> dictVal(d("user", 26)) ; 28 |-> strVal("ok") ; 29 |->
    strVal("backend") ; 30 |-> strVal("/login") ; 31 |-> strVal("session-0") ;
    32 |-> strVal("guest") ; 33 |-> dictVal(d("session", 31) ; d("type", 32)) ;
    34 |-> strVal("0") ; 35 |-> dictVal(d("user", 33) ; d("user_id", 34)) ; 36
    |-> strVal("backend") ; 37 |-> strVal("/login") ; 38 |-> strVal(
    "session-0") ; 39 |-> strVal("guest") ; 40 |-> dictVal(d("session", 38) ;
    d("type", 39)) ; 41 |-> strVal("0") ; 42 |-> dictVal(d("user", 40) ; d(
    "user_id", 41)) ; 43 |-> void)], 43, connectionOut)}))))))},initialState :
    getState(dispatched(evalStmt(call("request", args(str("backend"),str(
    "/add-favorite"),dict(dictItem(id("user"), dict(dictItem(id("type"), str(
    "user")),dictItem(id("id"), str("0"))))))) ; call("request", args(str(
    "backend"),str("/login"),dict(dictItem(id("user"), id("user")),dictItem(id(
    "user_id"), str("0"))))) ; call("request", args(str("backend"),str(
    "/favorite-count"),dict(dictItem(id("user"), id("user"))))), getState(
    functionCallResult(params(id("svc"),id("path"),id("payload")), [func(
    "request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id(
    "svc"),id("path"),id("payload")), connectionOut) ; $lock(id("res"),
    connectionOut) ; return(id("res"))) | "user" := 2 | stack(3, 0 |-> strVal(
    "guest") ; 1 |-> strVal("session-0") ; 2 |-> dictVal(d("session", 1) ; d(
    "type", 0)))], evalStmt(return(id("res")), getState({void,locked([func(
    "request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id(
    "svc"),id("path"),id("payload")), connectionOut) ; $lock(id("res"),
    connectionOut) ; return(id("res"))) | "path" := 4 ; "payload" := 8 ; "res"
    := 15 ; "svc" := 3 ; "user" := 2 | stack(16, 0 |-> strVal("guest") ; 1 |->
    strVal("session-0") ; 2 |-> dictVal(d("session", 1) ; d("type", 0)) ; 3 |->
    strVal("backend") ; 4 |-> strVal("/add-favorite") ; 5 |-> strVal(
    "session-0") ; 6 |-> strVal("guest") ; 7 |-> dictVal(d("session", 5) ; d(
    "type", 6)) ; 8 |-> dictVal(d("user", 7)) ; 9 |-> strVal("backend") ; 10
    |-> strVal("/add-favorite") ; 11 |-> strVal("session-0") ; 12 |-> strVal(
    "guest") ; 13 |-> dictVal(d("session", 11) ; d("type", 12)) ; 14 |->
    dictVal(d("user", 13)) ; 15 |-> void)], 15, connectionOut)}))))), list(
    strVal("backend") strVal("/add-favorite") map("user" |-> map(("session" |->
    strVal("session-0"), "type" |-> strVal("guest"))))), connectionOut)),
    waiting : connectionOut >}, 9))) service(initId(1), server(process(
    dummyConnection, {< executor : Executor | currentResult : {void,[func(
    "request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id(
    "svc"),id("path"),id("payload")), connectionOut) ; $lock(id("res"),
    connectionOut) ; return(id("res"))) | empty | stack(7, 0 |-> strVal(
    "cache") ; 1 |-> strVal("flush") ; 2 |-> dictVal(empty) ; 3 |-> strVal(
    "cache") ; 4 |-> strVal("flush") ; 5 |-> dictVal(empty) ; 6 |-> strVal(
    "ok"))]},initialState : getState(dispatched(functionCallResult(params(id(
    "svc"),id("path"),id("payload")), [func("request",params(id("svc"),id(
    "path"),id("payload")),$dispatch(list(id("svc"),id("path"),id("payload")),
    connectionOut) ; $lock(id("res"), connectionOut) ; return(id("res"))) |
    empty | stack(0, empty)], evalStmt(return(id("res")), getState({void,
    locked([func("request",params(id("svc"),id("path"),id("payload")),
    $dispatch(list(id("svc"),id("path"),id("payload")), connectionOut) ; $lock(
    id("res"), connectionOut) ; return(id("res"))) | "path" := 1 ; "payload" :=
    2 ; "res" := 6 ; "svc" := 0 | stack(7, 0 |-> strVal("cache") ; 1 |->
    strVal("flush") ; 2 |-> dictVal(empty) ; 3 |-> strVal("cache") ; 4 |->
    strVal("flush") ; 5 |-> dictVal(empty) ; 6 |-> void)], 6,
    connectionOut)}))), list(strVal("cache") strVal("flush") map(empty)),
    connectionOut)),waiting : none >}))) .

    op assert : -> StmtAST .
    eq assert = function("test", params(empty), assign(id("resp"), bool(false)) ; assign(id("i"), int(0)) ; $while($lt(id(
    "i"), call("len", args(id("connections")))), $ifelse($and($eq(member(index(id("connections"), id("i")), "path"), str(
    "/login")), $eq(member(index(id("connections"), id("i")), "hasResponse"), bool(true))), call("assert", args(bool(
    false))), pass) ; assign(id("i"), $add(id("i"), int(1)))))
    ; call("test", args(empty)) .

    op text : -> String .
    eq text = "service backend {\n    code {\n        function addFavorite(request) {\n            user = request . user ;\n            if (user . type == \"guest\") {\n                request(\"db\", \"insert-favorite\", { type : \"guest\", guest_id : user . session }) ;\n                response = request(\"db\", \"get-favorites\", { type : \"guest\", field : \"guest_id\", value : user . session }) ;\n                request(\"cache\", \"set\", { key : \"fav:guest:\" + user . session , value : len(response) }) ;\n            } else {\n                if (user . type == \"user\") {\n                    request(\"db\", \"insert-favorite\", { type : \"user\", user_id : user . id }) ;\n                    response = request(\"db\", \"get-favorites\", { type : \"user\", field : \"user_id\", value : user . id }) ;\n                    request(\"cache\", \"set\", { key : \"fav:user:\" + user . id , value : len(response) }) ;\n                }\n            }\n            respond(\"ok\");\n        }\n        function getFavoriteCount(request) {\n            user = request . user ;\n            if (user . type == \"guest\") {\n                r = request(\"cache\", \"get\", { key : \"fav:guest:\" + user . session, default : 0 });\n                respond(r) ;\n            } else {\n                if (user . type == \"user\") {\n                    r = request(\"cache\", \"get\", { key : \"fav:user:\" + user . id, default : 0 });\n                    respond(r) ;\n                }\n            }\n            respond(\"ok\");\n        }\n\n        function login(request) {\n            guest = request . user ;\n            user_id = request . user_id ;\n            fav = request(\"db\", \"get-favorites\", { type : \"guest\", field : \"guest_id\", value : guest . session }) ;\n            \n            userCount = request(\"cache\", \"get\", { key : \"fav:user:\" + user_id, default : 0 });\n            request(\"cache\", \"set\", { key : \"fav:user:\" + user_id, value : userCount + len(fav) });\n            \n            respond(\"ok\");\n        }\n    }\n    routes {\n        \"/add-favorite\" -> addFavorite\n        \"/favorite-count\" -> getFavoriteCount\n        \"/login\" -> login\n    }\n}\n\nservice cache {\n    persistent keys = {} ;\n    routes {\n        \"set\" -> set\n        \"get\" -> get\n        \"flush\" -> flush\n    }\n    code {\n        function set(request) {\n            k = getPersistent(\"keys\") ;\n            k [ request . key ] = request . value ;\n            setPersistent(\"keys\", k) ;\n            respond(\"ok\") ;\n        }\n        function get(request) {\n            k = getPersistent(\"keys\") ;\n            if (keyExists(k, request . key)) {\n                respond(k [ request . key ]) ;\n            } else {\n                respond(request . default);\n            }\n        }\n        function flush(request) {\n            setPersistent(\"keys\", { }) ;\n            respond(\"ok\") ;\n        }\n    }\n}\n\nservice db {\n    persistent favorites = [ ] ;\n\n    routes {\n        \"insert-favorite\" -> insertFavorite\n        \"get-favorites\" -> getFavorites\n    }\n\n    code {\n        function insertFavorite(request) {\n            fav = getPersistent(\"favorites\") ;\n            setPersistent(\"favorites\", append(fav, request)) ;\n            respond(\"ok\") ;\n        }\n        function getFavorites(query) {\n            fav = getPersistent(\"favorites\") ;\n            i = 0 ;\n            resp = [] ;\n            while (i < len(fav)) {\n                if (fav [ i ] . type == query . type && fav [ i ] [ query . field ] == query . value) {\n                    resp = append(resp, fav[i]) ;\n                }\n                i = i + 1 ;\n            }\n            respond(resp) ;\n        }\n    }\n}\n\ninit {\n    user = {\n        type : \"guest\",\n        session : \"session-0\"\n    };\n    request(\"backend\", \"/add-favorite\", { user : user });\n    request(\"backend\", \"/add-favorite\", { user : { type : \"user\", id : \"0\" } });\n    request(\"backend\", \"/login\", { user : user, user_id : \"0\" });\n    request(\"backend\", \"/favorite-count\", { user : user });\n}\n\ninit {\n    request(\"cache\", \"flush\", {}) ;\n}" .

    op text2 : -> String .
    eq text2 = "\ninit {\n    user = {\n        type : \"guest\",\n        session : \"session-0\"\n    };\n    request(\"backend\", \"/login\", { user : user, user_id : \"0\" });\n}" .

    op conf : -> Configuration .
    eq conf = <> connectionManager(1) initManager(1) service(initId(0), server(process(dummyConnection, {< executor :
    Executor | currentResult : {void,getState(functionCallResult(params(id("svc"),id("path"),id("payload")), [func(
    "request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id("svc"),id("path"),id("payload")), connectionOut)
    ; $lock(id("res"), connectionOut) ; return(id("res"))) | "user" := 2 | stack(3, 0 |-> strVal("guest") ; 1 |-> strVal(
    "session-0") ; 2 |-> dictVal(d("session", 1) ; d("type", 0)))], evalStmt(return(id("res")), getState({void,locked([
    func("request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id("svc"),id("path"),id("payload")),
    connectionOut) ; $lock(id("res"), connectionOut) ; return(id("res"))) | "path" := 4 ; "payload" := 9 ; "res" := 17 ;
    "svc" := 3 ; "user" := 2 | stack(18, 0 |-> strVal("guest") ; 1 |-> strVal("session-0") ; 2 |-> dictVal(d("session", 1)
    ; d("type", 0)) ; 3 |-> strVal("backend") ; 4 |-> strVal("/login") ; 5 |-> strVal("session-0") ; 6 |-> strVal("guest")
    ; 7 |-> dictVal(d("session", 5) ; d("type", 6)) ; 8 |-> strVal("0") ; 9 |-> dictVal(d("user", 7) ; d("user_id", 8)) ;
    10 |-> strVal("backend") ; 11 |-> strVal("/login") ; 12 |-> strVal("session-0") ; 13 |-> strVal("guest") ; 14 |->
    dictVal(d("session", 12) ; d("type", 13)) ; 15 |-> strVal("0") ; 16 |-> dictVal(d("user", 14) ; d("user_id", 15)) ; 17
    |-> void)], 17, connectionOut)}))))},initialState : getState(dispatched(functionCallResult(params(id("svc"),id("path"),
    id("payload")), [func("request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id("svc"),id("path"),id(
    "payload")), connectionOut) ; $lock(id("res"), connectionOut) ; return(id("res"))) | "user" := 2 | stack(3, 0 |->
    strVal("guest") ; 1 |-> strVal("session-0") ; 2 |-> dictVal(d("session", 1) ; d("type", 0)))], evalStmt(return(id(
    "res")), getState({void,locked([func("request",params(id("svc"),id("path"),id("payload")),$dispatch(list(id("svc"),id(
    "path"),id("payload")), connectionOut) ; $lock(id("res"), connectionOut) ; return(id("res"))) | "path" := 4 ; "payload"
    := 9 ; "res" := 17 ; "svc" := 3 ; "user" := 2 | stack(18, 0 |-> strVal("guest") ; 1 |-> strVal("session-0") ; 2 |->
    dictVal(d("session", 1) ; d("type", 0)) ; 3 |-> strVal("backend") ; 4 |-> strVal("/login") ; 5 |-> strVal("session-0")
    ; 6 |-> strVal("guest") ; 7 |-> dictVal(d("session", 5) ; d("type", 6)) ; 8 |-> strVal("0") ; 9 |-> dictVal(d("user",
    7) ; d("user_id", 8)) ; 10 |-> strVal("backend") ; 11 |-> strVal("/login") ; 12 |-> strVal("session-0") ; 13 |->
    strVal("guest") ; 14 |-> dictVal(d("session", 12) ; d("type", 13)) ; 15 |-> strVal("0") ; 16 |-> dictVal(d("user", 14)
    ; d("user_id", 15)) ; 17 |-> void)], 17, connectionOut)}))), list(strVal("backend") strVal("/login") map(("user" |->
    map(("session" |-> strVal("session-0"), "type" |-> strVal("guest"))), "user_id" |-> strVal("0")))), connectionOut)),
    waiting : connectionOut >}, 0)))
    connection(0, initId(0), "backend", httpRequest("/login", map(("user" |-> map(("session" |-> strVal("session-0"), "type" |-> strVal("guest"))), "user_id" |-> strVal("0"))))) .
endm

search [1]
    initConfig toConfig(text) 
=>* 
    C:Configuration 
    --- connection(N:Nat, S:SemServiceId, S':SemServiceId, httpRequest("/login", V:IOValue), RESP:SemResponse)
such that not satisfies(C:Configuration, assert) 
.

red metaSearch

rew satisfies(conf, assert) .